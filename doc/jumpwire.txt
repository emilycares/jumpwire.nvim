================================================================================
                                                                      *jumpwire*
This tool is for moving in common File structures. The most common use case is
to switch between implementation and test file.

To find out more:
https://github.com/micmine/jumpwire.nvim

jumpwire.setup()                                                *jumpwire.setup*

Put a configuration in the language table inside your init.vim.
lua require('jumpwire').setup({ language = {
                        \  ['ts'] = {
                        \    test = { type = 'fileExtension', data = 'test.ts'},
                        \    style = { type = 'fileExtension', data = 'css'},
                        \  },
                        \ }})

Or into a lua file.
require('jumpwire').setup({ language = {
  ['ts'] = {
    test = { type = 'fileExtension', data = 'test.ts'},
    style = { type = 'fileExtension', data = 'css'},
  },
}})

Add shortcuts:
noremap <leader>mt :lua require('jumpwire').jump('test')<CR>
noremap <leader>mi :lua require('jumpwire').jump('implementation')<CR>
noremap <leader>mm :lua require('jumpwire').jump('markup')<CR>
noremap <leader>ms :lua require('jumpwire').jump('style')<CR>

================================================================================
                                                             *jumpwire.defaults*
jeplace the existing entry inside the language table ( ['ts'] .... ) where 
you call the setup function
- `angular`
- `java`
- `kotlinlang`
- `reactjs`
- `svelte`
- `vuejs`

                                                     *jumpwire.defaults.angular*
['spec.ts'] = {
  implementation = { type = 'fileExtension', data = 'ts'},
  markup = { type = 'fileExtension', data = 'html'},
  style = { type = 'fileExtension', data = 'css'}
},
['ts'] = {
  test = { type = 'fileExtension', data = 'spec.ts'},
  markup = { type = 'fileExtension', data = 'html'},
  style = { type = 'fileExtension', data = 'css'},
},
['html'] = {
  implementation = { type = 'fileExtension', data = 'ts'},
  test = { type = 'fileExtension', data = 'spec.ts'},
  style = { type = 'fileExtension', data = 'css'}
},
['css'] = {
  implementation = { type = 'fileExtension', data = 'ts'},
  test = { type = 'fileExtension', data = 'spec.ts'},
  markup = { type = 'fileExtension', data = 'html'},
},

                                                        *jumpwire.defaults.java*
['java'] = {
  implementation = { type = 'jvm', data = 'implementation'},
  test = { type = 'jvm', data = 'test'},
},

                                                  *jumpwire.defaults.kotlinlang*
['kt'] = {
  implementation = { type = 'jvm', data = 'implementation'},
  test = { type = 'jvm', data = 'test'},
},

                                                     *jumpwire.defaults.reactjs*
['test.ts'] = {
  implementation = { type = 'fileExtension', data = 'ts'},
  style = { type = 'fileExtension', data = 'css'}
},
['ts'] = {
  test = { type = 'fileExtension', data = 'test.ts'},
  style = { type = 'fileExtension', data = 'css'},
},
['css'] = {
  implementation = { type = 'fileExtension', data = 'ts'},
  test = { type = 'fileExtension', data = 'test.ts'},
},

                                                       *jumpwire.defaults.vuejs*
['test.ts'] = {
  implementation = { type = 'fileExtension', data = 'ts'},
  markup = { type = 'fileExtension', data = 'vue'},
  style = { type = 'fileExtension', data = 'vue'}
},
['ts'] = {
  test = { type = 'fileExtension', data = 'test.ts'},
  markup = { type = 'fileExtension', data = 'vue'},
  style = { type = 'fileExtension', data = 'vue'},
},
['vue'] = {
  implementation = { type = 'lineContains', data = '<script'},
  test = { type = 'fileExtension', data = 'test.ts'},
  markup = { type = 'lineContains', data = '<template'},
  style = { type = 'lineContains', data = '<style'}
},

                                                      *jumpwire.defaults.svelte*
['test.ts'] = {
  implementation = { type = 'fileExtension', data = 'ts'},
  markup = { type = 'fileExtension', data = 'svelte'},
  style = { type = 'fileExtension', data = 'svelte'}
},
['ts'] = {
  test = { type = 'fileExtension', data = 'test.ts'},
  markup = { type = 'fileExtension', data = 'svelte'},
  style = { type = 'fileExtension', data = 'svelte'},
},
['svelte'] = {
  implementation = { type = 'lineContains', data = '<script'},
  test = { type = 'fileExtension', data = 'test.ts'},
  markup = { type = 'lineContains', data = '<div'},
  style = { type = 'lineContains', data = '<style'}
},
